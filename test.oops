struct FibIterator
	c
	n
end

impl Iterator for FibIterator
	def get()
		self.c
	end
	def next()
		FibIterator(self.n, self.c + self.n)
	end
	def done()
		self.c > 4000000
	end
end

print(FibIterator(1, 1).filter(fun(x) x % 2 == 0 end).fold(fun(x, y) x + y end, 0))

module A exports a, b, c
	a = 3
	a = 2
	b = 1
	t = 2
	g = 4
	c = -9999
end

print(A.a)
print(A.b)
print(A.c)
print(A)

try
	throw FibIterator(1, 1)
catch
| FibIterator(x, y) -> print("Caught {0} and {1}".format([x, y]))
| _ -> print("something else idk")
end

trait LinkedList
	def head()
		match self
		| Cons(h, _) -> h
		| Nil() -> null
		end
	end
	def tail()
		match self
		| Cons(_, t) -> t
		| Nil() -> null
		end
	end
	def length()
		match self
		| Cons(h, t) -> 1 + t.length()
		| Nil() -> 0
		end
	end
	def ::(h)
		Cons(h, self)
	end
	def to_string()
		match self
		| Cons(h, t) -> "Cons({0}, {1})".format([h, t])
		| Nil() -> "Nil()"
		end
	end
end

struct Cons
	h
	t
end
impl LinkedList for Cons end

struct Nil end
impl LinkedList for Nil end

a = 1 :: 2 :: 3 :: 4 :: Nil()
print(a)
print(a.length())

def f(l)
	match l
	| (x and [k, v]) :: xs ->
		print(x)
		print(k)
		print(v)
		f(xs)
	| [] -> print("done")
	end
end

f([[1, 2], [3, 4], [5, 6]])

x :: xs = [1, 3, 5, 7]
print(x)
print(xs)