trait Iterator
	get
	next
	done
	def map(f)
		class MapIterator uses Iterator
			def init(it)
				self.it = it
			end
			def get()
				f(self.it.get())
			end
			def next()
				MapIterator(self.it.next())
			end
			def done()
				self.it.done()
			end
		end
		MapIterator(self)
	end
	def for_each(f)
		if not self.done() then
			f(self.get())
			self.next().for_each(f)
		end
	end
	def filter(f)
		class FilterIterator uses Iterator
			def init(it)
				self.it = it
			end
			def get()
				if f(self.it.get()) then
					self.it.get()
				else
					self.it = self.it.next()
					self.get()
				end
			end
			def next()
				FilterIterator(self.it.next())
			end
			def done()
				self.it.done()
			end
		end
		FilterIterator(self)
	end
	def fold(f, i)
		if self.done() then
			i
		else
			self.next().fold(f, f(i, self.get()))
		end
	end
	def sum()
		self.fold(fun(x, y) x + y end, 0)
	end
	def collect()
		if self.done() then
			[]
		else
			self.get() :: self.next().collect()
		end
	end
end

List.use(Iterator)