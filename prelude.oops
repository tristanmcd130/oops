trait Iterator
	get
	next
	done
	def for_each(f)
		if self.done() then
			null
		else
			f(self.get())
			self.next().for_each(f)
		end
	end
	def map(f)
		struct MapIterator
			iter
		end
		impl Iterator for MapIterator
			def get()
				f(self.iter.get())
			end
			def next()
				MapIterator(self.iter.next())
			end
			def done()
				self.iter.done()
			end
		end
		MapIterator(self)
	end
	def filter(f)
		if self.done() then
			[]
		else
			let x = self.get() in
				if f(x) then
					x :: self.next().filter(f)
				else
					self.next().filter(f)
				end
			end
		end
	end
	def fold(f, i)
		if self.done() then
			i
		else
			self.next().fold(f, f(i, self.get()))
		end
	end
	def collect()
		if self.done() then
			[]
		else
			self.get() :: self.next().collect()
		end
	end
end

impl Iterator for List
	def get()
		self.head()
	end
	def next()
		self.tail()
	end
	def done()
		self.length() == 0
	end
end

impl Iterator for String
	def get()
		self.head()
	end
	def next()
		self.tail()
	end
	def done()
		self.length() == 0
	end
end

impl for Module
	def to_string()
		"<module " + self.__name + ">"
	end
end

struct Complex
	re
	im
end
impl for Complex
	def +(other)
		Complex(self.re + other.re, self.im + other.im)
	end
	def -(other)
		Complex(self.re - other.re, self.im - other.im)
	end
	def *(other)
		Complex(self.re * other.re - self.im * other.im, self.re * other.im + self.im * other.re)
	end
	def /(other)
		self * other.conj() * Complex(1 / (other.abs() * other.abs()), 0)
	end
	def conj()
		Complex(self.re, -self.im)
	end
	def abs()
		sqrt(self.re * self.re + self.im * self.im)
	end
end
impl Printable for Complex
	def to_string()
		"{0} + {1}i".format([self.re, self.im])
	end
end

struct Range
	start
	stop
end
impl Iterator for Range
	def get()
		self.start
	end
	def next()
		Range(self.start + 1, self.stop)
	end
	def done()
		self.start > self.stop
	end
end
impl Printable for Range
	def to_string()
		"{0}..{1}".format([self.start, self.stop])
	end
end

print("Welcome to oops")